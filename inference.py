# -*- coding: utf-8 -*-
"""Inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISJ_1hML1sgrcn6uo7bawNfYhguASg2N
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load model
model = joblib.load("random_forest.pkl")

# Title
st.title("Hotel Booking Status Prediction")
st.write("Masukkan data reservasi untuk memprediksi apakah akan dibatalkan atau tidak.")

# Input data dari user
no_of_adults = st.number_input("Jumlah Dewasa", min_value=0, value=2)
no_of_children = st.number_input("Jumlah Anak", min_value=0, value=0)
no_of_weekend_nights = st.number_input("Jumlah Malam Akhir Pekan", min_value=0, value=1)
no_of_week_nights = st.number_input("Jumlah Malam Hari Kerja", min_value=0, value=2)
type_of_meal_plan = st.selectbox("Meal Plan", ['Meal Plan 1', 'Meal Plan 2', 'Meal Plan 3'])
required_car_parking_space = st.selectbox("Butuh Parkir Mobil?", [0, 1])
room_type_reserved = st.selectbox("Tipe Kamar", ['Room_Type 1', 'Room_Type 2', 'Room_Type 3', 'Room_Type 4', 'Room_Type 5', 'Room_Type 6', 'Room_Type 7'])
lead_time = st.number_input("Lead Time (hari sebelum menginap)", min_value=0, value=10)
arrival_year = st.selectbox("Tahun Kedatangan", [2017, 2018])
arrival_month = st.number_input("Bulan Kedatangan (1-12)", min_value=1, max_value=12, value=1)
arrival_date = st.number_input("Tanggal Kedatangan (1-31)", min_value=1, max_value=31, value=1)
market_segment_type = st.selectbox("Tipe Market", ['Offline', 'Online', 'Corporate', 'Aviation', 'Complementary'])
repeated_guest = st.selectbox("Guest Kembali?", [0, 1])
avg_price_per_room = st.number_input("Rata-rata Harga per Kamar", min_value=0.0, value=100.0)
no_of_previous_cancellations = st.number_input("Jumlah Pembatalan Sebelumnya", min_value=0, value=0)
no_of_previous_bookings_not_canceled = st.number_input("Jumlah Pemesanan Sebelumnya yg Tidak Dibatalkan", min_value=0, value=0)
no_of_special_requests = st.number_input("Jumlah Permintaan Khusus", min_value=0, value=0)

# One-hot encoding manual (harus sama dengan preprocessing training)
input_data = {
    'no_of_adults': no_of_adults,
    'no_of_children': no_of_children,
    'no_of_weekend_nights': no_of_weekend_nights,
    'no_of_week_nights': no_of_week_nights,
    'required_car_parking_space': required_car_parking_space,
    'lead_time': lead_time,
    'arrival_year': 0 if arrival_year == 2017 else 1,
    'avg_price_per_room': avg_price_per_room,
    'no_of_previous_cancellations': no_of_previous_cancellations,
    'no_of_previous_bookings_not_canceled': no_of_previous_bookings_not_canceled,
    'no_of_special_requests': no_of_special_requests,
    'type_of_meal_plan_Meal Plan 2': 1 if type_of_meal_plan == 'Meal Plan 2' else 0,
    'type_of_meal_plan_Meal Plan 3': 1 if type_of_meal_plan == 'Meal Plan 3' else 0,
    'room_type_reserved_Room_Type 2': 1 if room_type_reserved == 'Room_Type 2' else 0,
    'room_type_reserved_Room_Type 3': 1 if room_type_reserved == 'Room_Type 3' else 0,
    'room_type_reserved_Room_Type 4': 1 if room_type_reserved == 'Room_Type 4' else 0,
    'room_type_reserved_Room_Type 5': 1 if room_type_reserved == 'Room_Type 5' else 0,
    'room_type_reserved_Room_Type 6': 1 if room_type_reserved == 'Room_Type 6' else 0,
    'room_type_reserved_Room_Type 7': 1 if room_type_reserved == 'Room_Type 7' else 0,
    'market_segment_type_Online': 1 if market_segment_type == 'Online' else 0,
    'market_segment_type_Corporate': 1 if market_segment_type == 'Corporate' else 0,
    'market_segment_type_Aviation': 1 if market_segment_type == 'Aviation' else 0,
    'market_segment_type_Complementary': 1 if market_segment_type == 'Complementary' else 0,
}

# Convert to DataFrame
input_df = pd.DataFrame([input_data])

# Load scaler dan transform
scaler = joblib.load("scaler.pkl")
numerical_cols = ['no_of_adults', 'no_of_children', 'no_of_weekend_nights', 'no_of_week_nights',
                  'lead_time', 'avg_price_per_room', 'no_of_previous_cancellations',
                  'no_of_previous_bookings_not_canceled', 'no_of_special_requests', 'arrival_year']
input_df[numerical_cols] = scaler.transform(input_df[numerical_cols])

# Prediksi
if st.button("Prediksi"):
    prediction = model.predict(input_df)[0]
    status = "Canceled" if prediction == 1 else "Not Canceled"
    st.success(f"Status Booking: **{status}**")
